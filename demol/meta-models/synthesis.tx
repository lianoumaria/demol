// Grammar for a system. A system consists a board (ESP32/ESP8266)
// and one or more peripherals (sensors/actuators).

import devices

SYNTHESIS:
    imports*=Import
    network=Network
    communication=CommunicationTransport
	connections*=Connection
;

Connection:
	"Connection" name=ID
	(
	    // ("board:" board=[Board|FQN])
	    ("board:" board=[devices.Board:ID|+m:device])  // RREL Usage
	    // ("peripheral:" peripheral=[Peripheral|FQN])
	    ("peripheral:" peripheral=[Peripheral:ID|+m:device]) // RREL
        // ("peripheral:" peripheral=[FQN])
	    ("powerConnections:" '-' power_conns*=PowerConnection['-'])?
	    ("ioConnections:" '-' io_conns+=IOConnection['-'])
	    ("endpoint:" endpoint=Endpoint)?
    )#
    'end'
;

PowerConnection:
	boardPin=[PowerPin:FQN|+m:device.pins] "--" peripheralPin=[PowerPin:FQN|+m:device.pins]
;

IOConnection:
	GPIOConnection | I2CConnection | SPIConnection | UARTConnection
;

GPIOConnection:
	"gpio" ":" boardPin=[IOPin:FQN|+m:device.pins] "--"
		peripheralPin=[IOPin:FQN|+m:device.pins]
;

FREQUENCY:
	val=INT unit=FREQ_UNIT
;

FREQ_UNIT:
	"hz" | "khz" | "mhz" | "ghz"
;

SPIConnection:
	"spi" ":"
	"mosi" ":" boardPin0=[IOPin:FQN|+m:device.pins] "--"
		peripheralPin0=[IOPin:FQN|+m:device.pins]
	"miso" ":" boardPin1=[IOPin:FQN|+m:device.pins] "--"
		peripheralPin1=[IOPin:FQN|+m:device.pins]
	"sck" ":" boardPin2=[IOPin:FQN|+m:device.pins] "--"
		peripheralPin2=[IOPin:FQN|+m:device.pins]
	"cs" ":" boardPin3=[IOPin:FQN|+m:device.pins] "--"
		peripheralPin3=[IOPin:FQN|+m:device.pins]
;

I2CConnection:
	type="i2c" ":"
	"sda" ":" boardPin0=[IOPin:FQN|+m:device.pins] "--"
		peripheralPin0=[IOPin:FQN|+m:device.pins]
	"scl" ":" boardPin1=[IOPin:FQN|+m:device.pins] "--"
		peripheralPin1=[IOPin:FQN|+m:device.pins]
	"slave_address:" "0x" slave_addr=INT
;

UARTConnection:
	"-" type="uart" ":"
	"tx:" board_int=ID "--" peripheral_int=ID
	"rx:" board_int=ID "--" peripheral_int=ID
	"baudrate:" baudrate=INT
;

Endpoint:
	(
        ("topic:" topic=STRING)
	    ("msg:" msg=MSG_ENTRIES)
        ("frequency:" freq=FREQUENCY)?
    )#
;

EndpointType:
    "Publisher"     |
    "Subscriber"    |
    "Consumer"      |
    "RPC"           |
    "Action"
;

Network:
    "Network"
	(
	    ("ssid:" ssid=STRING)
	    ("passwd:" passwd=STRING)
	    ("address:" address=STRING)?
	    ("channel:" channel=STRING)?
    )#
    "end"
;

CommunicationTransport:
    AMQPTransport | MQTTTransport | RedisTransport
;

AMQPTransport:
    'Communication<AMQP>'
    (
        ('host:' host=STRING)
        ('port:' port=INT)
        ('vhost:' vhost=STRING)
        ('username:' username=STRING)?
        ('password:' password=STRING)?
    )#
    'end'
;

MQTTTransport:
    'Communication<MQTT>'
    (
        ('host:' host=STRING)
        ('port:' port=INT)
        ('username:' username=STRING)?
        ('password:' password=STRING)?
    )#
    'end'
;

RedisTransport:
    'Communication<Redis>'
    (
        ('host:' host=STRING)
        ('port:' port=INT)
        ('db:' db=INT)?
        ('username:' username=STRING)?
        ('password:' password=STRING)?
    )#
    'end'
;

ADDRESS_ID:
	/([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}/
;

MSG_ENTRIES:
	msg_entries*=MSG_TYPES[","]
;

MSG_TYPES:
	SENSOR | ACTUATOR
;

SENSOR:
	"Distance" | "Temperature" | "Humidity" | "Gas" | "Pressure" | "Env" | "Acceleration"
;

ACTUATOR:
	"MotorController" | "LedController" | "ServoController"
;

// FQN: ID+['.'];
FQN: ID('.'ID)*;
FQNI: ID+['.']('.*')?;
Import: 'import' importURI=FQNI ('as' name=ID)?;

Description: /\#(.*?)$/;

// Special rule for comments. Comments start with //

// Comments
Comment: CommentLine | CommentBlock ;

CommentLine: /\/\/.*?$/;

CommentBlock: /\/\*(.|\n)*?\*\//;
