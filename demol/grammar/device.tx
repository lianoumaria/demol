// Grammar for a system. A system consists a board (ESP32/ESP8266)
// and one or more peripherals (sensors/actuators).

import component
import communication

Synthesis:
    imports*=Import
    components=ComponentBag
    (
        network=Network
        communication=CommunicationMiddleware
        connections+=Connection
    )#
;

ComponentBag:
    'Components'
	    ("board:" board=[Board:FQN|+m:component])  // RREL
	    ("peripherals:" '-' peripherals*=[Peripheral:FQN|+m:component]['-'])? // RREL
    'end'
;

Connection:
	"Connection"
	(
	    ("board:" board=[Board:FQN|+m:component])  // Hanled by Model Processor
	    ("peripheral:" peripheral=[Peripheral:FQN|+m:component]) // Handled by Model processor
	    ("powerConnections:" '-' powerConns*=PowerConnection['-'])
	    ("ioConnections:" '-' ioConns+=IOConnection['-'])
	    ("driverTpl:" driverTpl=STRING)?
	    ("endpoint:" endpoint=Endpoint)?
    )#
    'end'
;
/*
PowerConnection:
	boardPin=[PowerPin:FQN|+m:device.pins] "--" peripheralPin=[PowerPin:FQN|+m:device.pins]
;
*/

PinConnection:
    boardPin=ID "--" peripheralPin=ID
;

PowerConnection: PinConnection;

IOConnection:
	GPIOConnection | I2CConnection | SPIConnection | UARTConnection
;

GPIOConnection:
	"type" ":"  type="gpio"
    ('name:' name=NID)?
    ('pins:' pinConn=PinConnection)
;

GPIOMode:
    ('input' ':' input=BOOL)?
    ('output' ':' output=BOOL)?
    ('pullup' ':' pullup=BOOL)?
    ('pulldown' ':' pulldown=BOOL)?
    ('open_drain' ':' openDrain=BOOL)?
;

/*
GPIOMode:
    'INPUT'                 |
    'OUTPUT'                |
    'OUTPUT_OPEN_DRAIN'     |
    'INPUT_PULLUP'
;
*/

SPIConnection:
	"type" ":" type="spi"
    ('name:' name=NID)?
    ('pins:')
        "mosi" ":" mosi=PinConnection
        "miso" ":" miso=PinConnection
        "sck" ":" sck=PinConnection
        "cs" ":" cs=PinConnection
;

I2CConnection:
    (
	"type" ":" type="i2c"
    ('name:' name=NID)?
    ("slave_address:" "0x" slave_addr=INT)
    ('pins:')
        "sda" ":" sda=PinConnection
        "scl" ":" scl=PinConnection
    )#
;

UARTConnection:
	"type" ":" type="uart"
    ('name:' name=NID)?
    "tx" ":" tx=PinConnection
    "rx" ":" rx=PinConnection
    "baudrate:" baudrate=INT
;

Endpoint:
	(
        ("topic:" topic=STRING)
	    ("msg:" msg=MessageType)
    )#
;

EndpointType:
    "Publisher"     |
    "Subscriber"    |
    "Consumer"      |
    "RPC"           |
    "Action"
;

Network:
    "Network"
	(
	    ("ssid:" ssid=STRING)
	    ("passwd:" passwd=STRING)
	    ("address:" address=STRING)?
	    ("channel:" channel=STRING)?
    )#
    "end"
;


ADDRESS_ID:
	/([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}/
;

MessageType:
	SensorMsgType | ActuatorMsgType | CustomMsgType
;

CustomMsgType: 'Custom';

SensorMsgType:
	"Distance"      |
    "Temperature"   |
    "Humidity"      |
    "Gas"           |
    "Pressure"      |
    "Env"           |
    "Acceleration"  |
    "Custom"
;

ActuatorMsgType:
	"MotorController"   |
    "LedController"     |
    "ServoController"   |
    "Custom"
;

NID: /(.*?)\n/;
// FQN: ID+['.'];
FQN: ID('.'ID)*;
FQNI: ID+['.']('.*')?;
Import: 'import' importURI=FQNI ('as' name=ID)?;

Description: /\#(.*?)$/;

// Special rule for comments. Comments start with //

// Comments
Comment: CommentLine | CommentBlock ;

CommentLine: /\/\/.*?$/;

CommentBlock: /\/\*(.|\n)*?\*\//;
