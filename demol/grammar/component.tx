import common

//Device
ComponentModel:
    component=Component
;

Component:
    Board | Peripheral
;


Board:
    'Board' name=ID
	(
	    ("cpu" ":" cpu=CPU)
        ("memory" ":" memory=Memory)
        ("vcc" ":" vcc=PowerType)
	    ("pins" ":" "-" pins*=Pin["-"])
	    ('networking' ':' '-' networking*=NetworkInterface['-'])?
	    ('bluetooth' ':' bluetooth=Bluetooth)?
        ("ioVcc" ":" iovcc=PowerType)?
     )#
    'end'
;

Peripheral: Sensor | Actuator;

Actuator:
    'Actuator' name=ID
	(
	  ("vcc" ":" vcc=PowerType)
	  ("msg:" msg=ActuatorMsgType)
	  ("pins" ":" "-" pins*=Pin["-"])
	  ("attributes" ":" "-" attributes*=Attribute["-"])?
	  ("constraints" ":" "-" constraints*=Constraint["-"])?
	  ("powerConsumption" ":" power=NUMBER unit=PowerUnit)?
	  ("riotTpl" ":" riotTpl=STRING)?
	  ("piTpl" ":" piTpl=STRING)?
	  ("ioVcc" ":" ioVcc=PowerType)?
    )#
    'end'
;

Sensor:
    'Sensor' name=ID
	(
	  ("vcc" ":" vcc=PowerType) //This should may become a range  
	  ("msg:" msg=SensorMsgType)
	  ("pins" ":" "-" pins*=Pin["-"])
	  ("attributes" ":" "-" attributes*=Attribute["-"])?
	  ("constraints" ":" "-" constraints*=Constraint["-"])?
	  ("powerConsumption" ":" power=NUMBER unit=PowerUnit)?
	  ("riotTpl" ":" riotTpl=STRING)?
	  ("piTpl" ":" piTpl=STRING)?
	  ("ioVcc" ":" ioVcc=PowerType)?
    )#
    'end'
;

Pin:
	PowerPin | IOPin
;

PowerPin:
	"power:"
	(
        ("name:" name=ID)
	    ("number:" number=INT)
	    ("type:" ptype=PowerType)
    )#
;

PowerType:
	"GND"   |
    "5V"    |
    "3V3"   |
    "12V"   |
    Custom
;

Custom:
    /[0-9]+(\.[0-9]+)?V/
;

IOPin:
	"io_pin:"
	(
        ("functions:" funcs*=PinFunction[","])
        ("name:" name=ID)
	    ("number:" number=INT)?
	    ("vmin:" vmin=NUMBER)?
	    ("vmax:" vmax=NUMBER)?
	    ("signalLevel:" signalLevel=NUMBER)?
    )#
;

PinFunction:
	GPIO | I2C | SPI | UART | PWM | ADC | DAC | PCM
;

GPIO:
	ptype="gpio"
;

I2C:
	ptype=I2C_TYPE "-" bus=INT
;

I2C_TYPE:
	"sda" | "scl"
;

SPI:
	ptype=SPIPinType "-" bus=INT
;

SPIPinType:
	"mosi" | "miso" | "sck" | "cs"
;

UART:
	ptype=UARTPinType "-" bus=INT
;

UARTPinType:
	"tx" | "rx"
;

PWM:
	ptype="pwm" "-" channel=INT
;

ADC:
	ptype="adc"
;

DAC:
	ptype="dac"
;

PCM:
    ptype=PCMType
;

PCMType:
    "fs" | "din" | "dout"
;

CPU:
	(
        ("cpu_family:" cpu_family=CPUFamilyType)
	    ("max_freq:" max_freq=NUMBER unit=FrequencyUnit)
	    ("fpu:" fpu=BOOL)
    )#
;


CPUFamilyType:
	("ESP32" | "ESP8266" | "PiArmCortex")
;

Memory:
	(
        ("ram:" ram=NUMBER UNITS)?
        ("rom:" rom=NUMBER UNITS)?
        ("flash:" flash=NUMBER UNITS)?
    )#
;


NetworkInterface:
    WifiInterface   |
    EthernetInterface
;

WifiInterface:
	"wifi:"
	(
        ("name:" name=ID)
	    ("freq:" freq=NUMBER unit=FrequencyUnit)?
    )#
;


EthernetInterface:
	"ethernet:"
        "name:" name=ID
;

Bluetooth:
    'NA' |
    'BT3' |
    'BT4' |
    'BT5'
;

/*
MessageType:
	SensorMsgType | ActuatorMsgType
;
*/

// Τα templates γράφονται με ωάση τα MsgType που υποστηρίζει η DSL
SensorMsgType:
	"Distance"      |
    "Temperature"   |
    "Humidity"      |
    "Gas"           |
    "Pressure"      |
    "Env"           |
    "Acceleration"  |
    "IMU"           |
    "Tracker"       |
    "ADC"
;

ActuatorMsgType:
	"MotorController"   |
    "ServoController"   |
    "LedArray"
;


Attribute:
    NumericAttribute    |
    BoolAttribute       |
    StringAttribute     |
    ListAttribute       |
    DictAttribute
;

NumericAttribute:
    IntAttribute | FloatAttribute
;

IntAttribute:
    name=ID ':' type='int' ('=' default=INT)?
;

FloatAttribute:
    name=ID ':' type='float' ('=' default=FLOAT)?
;

StringAttribute:
    name=ID ':' type='str' ('=' default=STRING)?
;

BoolAttribute:
    name=ID ':' type='bool' ('=' default=BOOL)?
;

ListAttribute:
    name=ID ':' type='list' ('=' '[' default*=OBJECT[','] ']')?
;

DictAttribute:
    name=ID ':' type='dict' ('=' '{' items*=Attribute[','] '}')?
;

Constraint:
	name = "max_frequency" ":" value=NUMBER unit=FrequencyUnit |
	name = "min_distance" ":" value=NUMBER unit=DistanceUnit |
	name = "max_distance" ":" value=NUMBER unit=DistanceUnit
;
		

UNITS:
    ("kb" | "mb" | "gb" | "b")
;

FrequencyUnit:
	"ghz" | "mhz" | "khz" | "hz"
;

DistanceUnit:
	"m" | "cm" | "mm"
;

PowerUnit:
	"W" | "mW" | "uW"
;
